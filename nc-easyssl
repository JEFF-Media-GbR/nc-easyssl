#!/bin/bash

# nc-easyssl
# automatically aquires LetsEncrypt cerfiticates using certbot and the certbot-dns-netcup plugin

# configuration is parsed from the config file

# ERROR codes
# 127 could not enter directory of script
# 126 error parsing config.ini
# 125 unknown argument
# 124 config.ini or domains.ini not found
# 123 required command not found
# 122 error parsing domains.ini
# other: number of certificate requests that have failed

VERSION=0.1


cd "$(dirname "${BASH_SOURCE[0]}")" || {
	echo "ERROR: Could not enter directory $(dirname "${BASH_SOURCE[0]}")"
	exit 127
}

{
for argument in "$@"; do
	if [[ "$argument" == "--skip-custom-certs" ]]; then
		SKIPCUSTOMCERTS=yes
	elif [[ "$argument" == "--skip-universal-cert" ]]; then
		SKIPUNIVERSALCERT=yes
	elif [[ "$argument" == "--debug" ]]; then
		echo "WARNING: Debug mode activated. Output will contain your credentials!"
		set -x
	else
		echo "ERROR: Unknown argument $argument"
		exit 125
	fi
done

function check_config() {
	config_error=false
	REQUIRED_VARS=(EMAIL NC_CUSTOMERID NC_APIKEY NC_APIPASSWORD PROPAGATION_SECONDS CERTBOT_COMMAND)
	for VARIABLE in "${REQUIRED_VARS[@]}"; do
		if [[ -z "${!VARIABLE}" ]]; then
			echo "ERROR: You did not set $VARIABLE in the config.ini file."
			config_error=true
		fi
	done
	emailregex="^[a-z0-9!#\$%&'*+/=?^_\`{|}~-]+(\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*@([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]([a-z0-9-]*[a-z0-9])?\$"
	if [[ -n "$EMAIL" ]] && [[ ! $EMAIL =~ $emailregex ]] ; then
    		echo "ERROR: Invalid value for EMAIL in the config.ini file."
		config_error=true
	fi
	if [[ "$config_error" == "true" ]]; then
		exit 126
	fi
}

function checkrequirements() {
	commands=()
	for command in "${commands[@]}"; do
		command -v "$command" >/dev/null 2>&1 || { echo "ERROR: This script requires $command but it's not installed. Aborting." >&2; exit 123; }
	done
	command -v pip >/dev/null 2>&1 || { echo "ERROR: This script requires certbot but it's not installed. When using Debian/Ubuntu, try 'apt-get install certbot'. Aborting." >&2; exit 123; }
	command -v pip >/dev/null 2>&1 || { echo "ERROR: This script requires pip but it's not installed. When using Debian/Ubuntu, try 'apt-get install --no-install-recommends python-pip'. Aborting." >&2; exit 123; }
	
	modules=(setuptools certbot-dns-netcup)
	for module in "${modules[@]}"; do
		if [[ $(pip list 2>/dev/null| grep -c "$module") -ne 1 ]]; then
			echo "ERROR: $module not found. Try 'pip install $module'. Aborting."
			exit 123
		fi
	done
}

function checkerror() {
	if [[ "$?" -ne 0 ]]; then
		fails=$((fails+1))
	else
		successes=$((successes+1))
	fi
}
function header() {
	echo "=== $* ==="
}
function separator() {
	echo "--------------------------------------------------------------------------------"
	echo "$*"
	echo "--------------------------------------------------------------------------------"
}
function create_credential_file() {
	touch netcup_credentials.ini
	chmod 700 netcup_credentials.ini
	cat << EOF > netcup_credentials.ini
certbot_dns_netcup:dns_netcup_customer_id  = $NC_CUSTOMERID
certbot_dns_netcup:dns_netcup_api_key      = $NC_APIKEY
certbot_dns_netcup:dns_netcup_api_password = $NC_APIPASSWORD
EOF
}
function remove_credential_file() {
	rm netcup_credentials.ini
}
function check_and_create_config_file() {
	if [[ ! -f config.ini ]]; then
	touch config.ini
	chmod 700 config.ini
	cat <<- 'EOF' > config.ini
		# You must set an email address for LetsEncrypt.
		EMAIL=""

		# Insert your NetCup API credentials.
		NC_CUSTOMERID=""
		NC_APIKEY=""
		NC_APIPASSWORD=""

		# Time to wait after creating DNS records. I recommend setting your domains' TTL to 600 and this value to 900
		PROPAGATION_SECONDS=900

		# When set to true, create wildcard certs for each given domain name.
		WILDCARD=true

		# When set to true, create an additional certificate that combines all your domain names.
		UNIVERSAL=false

		# Commands that shall be run before and after obtaining certificates. The commands will be run using 'eval'.
		PRE_COMMAND=""
		POST_COMMAND=""
		
		# File where to store the credentials for the certbot-dns-netcup plugin.
		# The file will be automatically created with chmod 700 and will be deleted when the script exits.
		CREDENTIALS_FILE="netcup_credentials.ini"

		# You can define your own certbot options here
		CERTBOT_COMMAND="certbot certonly
        --email $EMAIL
        --agree-tos
        --authenticator certbot-dns-netcup:dns-netcup
        --certbot-dns-netcup:dns-netcup-propagation-seconds $PROPAGATION_SECONDS
        --certbot-dns-netcup:dns-netcup-credentials $CREDENTIALS_FILE
        --server https://acme-v02.api.letsencrypt.org/directory
        -n
        --expand"
	EOF

	echo "ATTENTION: A config file has been generated at $(realpath config.ini). Please change it according to your needs. Don't forget to insert your API credentials!"
	echo
	setup=1
fi
}
function check_and_create_domains_file() {
	if [[ ! -f domains.ini ]]; then
	cat <<- EOF > domains.ini
		mydomain.de
		myotherdomain.de myotherdomain.com
		example.de example.com example.org
	EOF

	echo "ATTENTION: A domains.ini file has been generated at $(realpath domains.ini). Please insert all your domain names. You can have multiple domains in one line to combine them into a single certificate."
	echo
	setup=1
fi
}
function check_domains_file() {
	if [[ $(grep '*' domains.ini | wc -l) -gt 0 ]]; then
		echo "ERROR: At least one of your domains contains the wildcard character '*'. You must disable the WILDCARD option in the config.ini file or remove the wildcard domain from your domains.ini file."
		exit 122
	fi
}

successes=0
fails=0
setup=0

checkrequirements

check_and_create_config_file
check_and_create_domains_file
if [[ "$setup" -ne 0 ]]; then
	exit 124
fi

source config.ini
check_config
check_domains_file

fulllist=""

set -f # disable globbing
create_credential_file
trap remove_credential_file EXIT SIGTERM SIGINT

if [[ -n "$PRE_COMMAND" ]]; then
	header "Executing PRE_COMMAND"
	separator "$PRE_COMMAND"
	$PRE_COMMAND
fi

while read domains; do

	list=""

	for domain in $domains; do
		if [[ "$WILDCARD" == "true" ]]; then
			list="$list -d $domain -d *.${domain}"
			fulllist="$fulllist -d $domain -d *.${domain}"
		else
			list="$list -d $domain"
			fulllist="$fulllist -d $domain"
		fi
	done

	if [[ "$SKIPCUSTOMCERTS" != "yes" ]]; then
		echo
		header "Obtaining certificate"
		separator "$list"
		$CERTBOT_COMMAND $list
		checkerror
		echo
	fi

done <domains.ini

if [[ "$SKIPUNIVERSALCERT" != "yes" ]] && [[ "$UNIVERSAL" == "true" ]]; then
	echo
	header "Obtaining universal certificate"
	separator "$fulllist"
	$CERTBOT_COMMAND --cert-name universal $fulllist
	checkerror
fi
echo

if [[ -n "$POST_COMMAND" ]]; then
	header "Executing POST_COMMAND"
	separator "$POST_COMMAND"
	$POST_COMMAND
fi

header "Done after $SECONDS seconds"
echo "Certificates obtained: $successes"
echo "Fails: $fails"

if [[ "$fails" -gt 0 ]]; then
	echo
	echo "WARNING: Not all certificates could be obtained. Please check the following things:"
	echo "- Correct E-Mail address in config.ini"
	echo "- Correct NetCup API credentials in config.ini"
	echo "- Set your PROPAGATION_SECONDS in config.ini higher than the TTL of your domains"
	echo "- Ensure you only list domains using the NetCup nameservers in domains.txt"
	echo "- Make sure you use newlines or spaces to seperate domains in domains.txt"
	echo "- Use Punycode for domains that contain special characters in domains.txt"
	echo
	echo "When pasting debug logs, make sure to remove your credentials from the output!"
fi

exit $fails
} | tee nc-easyssl.log

